// 
// *  This file was automatically generated by MoMEMta-MaGMEE,
// *  A MadGraph Matrix Element Exporter plugin for MoMEMta.
// *
// *  It is subject to MoMEMta-MaGMEE's license and copyright:
// *
// *  Copyright (C) 2016  Universite catholique de Louvain (UCL), Belgium
// *
// *  This program is free software: you can redistribute it and/or modify
// *  it under the terms of the GNU General Public License as published by
// *  the Free Software Foundation, either version 3 of the License, or
// *  (at your option) any later version.
// *
// *  This program is distributed in the hope that it will be useful,
// *  but WITHOUT ANY WARRANTY; without even the implied warranty of
// *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// *  GNU General Public License for more details.
// *
// *  You should have received a copy of the GNU General Public License
// *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 

#include <Parameters_modTEFT_H.h> 

#include <SLHAReader.h> 

namespace pp_hh_tree_MV_standalone_modTEFT_H 
{

using namespace std; 

// Constructor
Parameters_modTEFT_H::Parameters_modTEFT_H(const SLHA::Reader& card) 
{
// Prepare a vector for indices (for reading indexed entries)
vector<int> indices(2, 0); 

m_card_parameters["mdl_WH"] = card.get_block_entry("decay", 25, 4.070000e-03); 
m_card_parameters["mdl_WW"] = card.get_block_entry("decay", 24, 2.085000e+00); 
m_card_parameters["mdl_WZ"] = card.get_block_entry("decay", 23, 2.495200e+00); 
m_card_parameters["mdl_WT"] = card.get_block_entry("decay", 6, 0.000000e+00); 
m_card_parameters["mdl_ymtau"] = card.get_block_entry("yukawa", 15,
    1.777000e+00);
m_card_parameters["mdl_ymt"] = card.get_block_entry("yukawa", 6, 1.725000e+02); 
m_card_parameters["aS"] = card.get_block_entry("sminputs", 3, 1.184000e-01); 
m_card_parameters["mdl_Gf"] = card.get_block_entry("sminputs", 2,
    1.166370e-05);
m_card_parameters["aEWM1"] = card.get_block_entry("sminputs", 1, 1.279000e+02); 
m_card_parameters["mdl_MH"] = card.get_block_entry("mass", 25, 1.250000e+02); 
m_card_parameters["mdl_MZ"] = card.get_block_entry("mass", 23, 9.118760e+01); 
m_card_parameters["mdl_MTA"] = card.get_block_entry("mass", 15, 1.777000e+00); 
m_card_parameters["mdl_MT"] = card.get_block_entry("mass", 6, 1.725000e+02); 
m_card_parameters["MU_R"] = card.get_block_entry("loop", 1, 9.118800e+01); 
m_card_parameters["mdl_cH"] = card.get_block_entry("dim6", 8, 1.000000e+00); 
m_card_parameters["mdl_c6"] = card.get_block_entry("dim6", 7, 1.000000e+00); 
m_card_parameters["mdl_ccc"] = card.get_block_entry("dim6", 6, 1.000000e+00); 
m_card_parameters["mdl_muprime"] = card.get_block_entry("dim6", 5,
    1.725000e+02);
m_card_parameters["mdl_Ctphi"] = card.get_block_entry("dim6", 4, 1.000000e+00); 
m_card_parameters["mdl_CphiG"] = card.get_block_entry("dim6", 3, 1.000000e+00); 
m_card_parameters["mdl_CtG"] = card.get_block_entry("dim6", 2, 1.000000e+00); 
m_card_parameters["mdl_Lambda"] = card.get_block_entry("dim6", 1,
    1.000000e+03);

this->cacheParameters(); 
this->cacheCouplings(); 
}

void Parameters_modTEFT_H::cacheParameters()
{
// Define "zero"
zero = 0; 
ZERO = 0; 
mdl_WH = m_card_parameters["mdl_WH"]; 
mdl_WW = m_card_parameters["mdl_WW"]; 
mdl_WZ = m_card_parameters["mdl_WZ"]; 
mdl_WT = m_card_parameters["mdl_WT"]; 
mdl_ymtau = m_card_parameters["mdl_ymtau"]; 
mdl_ymt = m_card_parameters["mdl_ymt"]; 
aS = m_card_parameters["aS"]; 
mdl_Gf = m_card_parameters["mdl_Gf"]; 
aEWM1 = m_card_parameters["aEWM1"]; 
mdl_MH = m_card_parameters["mdl_MH"]; 
mdl_MZ = m_card_parameters["mdl_MZ"]; 
mdl_MTA = m_card_parameters["mdl_MTA"]; 
mdl_MT = m_card_parameters["mdl_MT"]; 
MU_R = m_card_parameters["MU_R"]; 
mdl_cH = m_card_parameters["mdl_cH"]; 
mdl_c6 = m_card_parameters["mdl_c6"]; 
mdl_ccc = m_card_parameters["mdl_ccc"]; 
mdl_muprime = m_card_parameters["mdl_muprime"]; 
mdl_Ctphi = m_card_parameters["mdl_Ctphi"]; 
mdl_CphiG = m_card_parameters["mdl_CphiG"]; 
mdl_CtG = m_card_parameters["mdl_CtG"]; 
mdl_Lambda = m_card_parameters["mdl_Lambda"]; mdl_MZ__exp__2 = ((mdl_MZ) *
    (mdl_MZ));
mdl_MZ__exp__4 = ((mdl_MZ) * (mdl_MZ) * (mdl_MZ) * (mdl_MZ)); 
mdl_sqrt__2 = sqrt(2.); 
mdl_MH__exp__2 = ((mdl_MH) * (mdl_MH)); 
mdl_Lambda__exp__2 = ((mdl_Lambda) * (mdl_Lambda)); 
mdl_complexi = std::complex<double> (0., 1.); 
mdl_MT__exp__2 = ((mdl_MT) * (mdl_MT)); 
mdl_MT__exp__3 = ((mdl_MT) * (mdl_MT) * (mdl_MT)); 
mdl_aEW = 1./aEWM1; 
mdl_MW = sqrt(mdl_MZ__exp__2/2. + sqrt(mdl_MZ__exp__4/4. - (mdl_aEW * M_PI *
    mdl_MZ__exp__2)/(mdl_Gf * mdl_sqrt__2)));
mdl_sqrt__aEW = sqrt(mdl_aEW); 
mdl_ee = 2. * mdl_sqrt__aEW * sqrt(M_PI); 
mdl_MW__exp__2 = ((mdl_MW) * (mdl_MW)); 
mdl_sw2 = 1. - mdl_MW__exp__2/mdl_MZ__exp__2; 
mdl_cw = sqrt(1. - mdl_sw2); 
mdl_sqrt__sw2 = sqrt(mdl_sw2); 
mdl_sw = mdl_sqrt__sw2; 
mdl_g1 = mdl_ee/mdl_cw; 
mdl_gw = mdl_ee/mdl_sw; 
mdl_vev = (2. * mdl_MW * mdl_sw)/mdl_ee; 
mdl_vev__exp__2 = ((mdl_vev) * (mdl_vev)); 
mdl_lam = mdl_MH__exp__2/(2. * mdl_vev__exp__2); 
mdl_yt = (mdl_ymt * mdl_sqrt__2)/mdl_vev; 
mdl_ytau = (mdl_ymtau * mdl_sqrt__2)/mdl_vev; 
mdl_muH = sqrt(mdl_lam * mdl_vev__exp__2); 
mdl_I2b33 = mdl_yt; 
mdl_I3b33 = mdl_yt; 
mdl_deltalam = ((-mdl_cH * 3./2. + mdl_c6) *
    mdl_vev__exp__2)/mdl_Lambda__exp__2;
mdl_yt__exp__2 = ((mdl_yt) * (mdl_yt)); 
mdl_dtth = mdl_cH/(2. * mdl_yt__exp__2); 
mdl_dtthh = mdl_cH/(3. * mdl_yt__exp__2); 
mdl_ee__exp__2 = ((mdl_ee) * (mdl_ee)); 
mdl_sw__exp__2 = ((mdl_sw) * (mdl_sw)); 
mdl_cw__exp__2 = ((mdl_cw) * (mdl_cw)); 
mdl_yt__exp__3 = ((mdl_yt) * (mdl_yt) * (mdl_yt)); 
mdl_yt__exp__4 = ((mdl_yt) * (mdl_yt) * (mdl_yt) * (mdl_yt)); 
mdl_MU_R__exp__2 = ((MU_R) * (MU_R)); 
}

void Parameters_modTEFT_H::cacheCouplings()
{
GC_45 = -6. * mdl_complexi * mdl_lam * mdl_vev; 
GC_76 = (8. * mdl_ccc * mdl_CphiG * mdl_complexi *
    mdl_yt__exp__2)/mdl_Lambda__exp__2;
GC_79 = (8. * mdl_ccc * mdl_CphiG * mdl_complexi * mdl_vev *
    mdl_yt__exp__2)/mdl_Lambda__exp__2;
}

void Parameters_modTEFT_H::updateParameters()
{
mdl_sqrt__aS = sqrt(aS); 
G = 2. * mdl_sqrt__aS * sqrt(M_PI); 
mdl_G__exp__2 = ((G) * (G)); 
mdl_G__exp__3 = ((G) * (G) * (G)); 
mdl_G__exp__4 = ((G) * (G) * (G) * (G)); 
}

void Parameters_modTEFT_H::updateCouplings()
{

}

}

